rapidjson provides CMake targets:

    # this is heuristically generated, and may not be correct
    find_package(RapidJSON CONFIG REQUIRED)
    target_link_libraries(main PRIVATE rapidjson)

The package zlib is compatible with built-in CMake targets:

    find_package(ZLIB REQUIRED)
    target_link_libraries(main PRIVATE ZLIB::ZLIB)

The package openssl is compatible with built-in CMake targets:

    find_package(OpenSSL REQUIRED)
    target_link_libraries(main PRIVATE OpenSSL::SSL OpenSSL::Crypto)

The package boost is compatible with built-in CMake targets:

    find_package(Boost REQUIRED [COMPONENTS <libs>...])
    target_link_libraries(main PRIVATE Boost::boost Boost::<lib1> Boost::<lib2> ...)

lz4 provides CMake targets:

    # this is heuristically generated, and may not be correct
    find_package(lz4 CONFIG REQUIRED)
    target_link_libraries(main PRIVATE lz4::lz4)

The package arrow provides CMake targets:

    find_package(Arrow CONFIG REQUIRED)
    target_link_libraries(main PRIVATE "$<IF:$<BOOL:${ARROW_BUILD_STATIC}>,Arrow::arrow_static,Arrow::arrow_shared>")

    find_package(Parquet CONFIG REQUIRED)
    target_link_libraries(main PRIVATE "$<IF:$<BOOL:${ARROW_BUILD_STATIC}>,Parquet::parquet_static,Parquet::parquet_shared>")

    find_package(ArrowDataset CONFIG REQUIRED)
    target_link_libraries(main PRIVATE "$<IF:$<BOOL:${ARROW_BUILD_STATIC}>,ArrowDataset::arrow_dataset_static,ArrowDataset::arrow_dataset_shared>")

    find_package(ArrowAcero CONFIG REQUIRED)
    target_link_libraries(main PRIVATE "$<IF:$<BOOL:${ARROW_BUILD_STATIC}>,ArrowAcero::arrow_acero_static,ArrowAcero::arrow_acero_shared>")

curl is compatible with built-in CMake targets:

    find_package(CURL REQUIRED)
    target_link_libraries(main PRIVATE CURL::libcurl)

The package aws-sdk-cpp:x64-linux-dynamic provides CMake targets:

    When using AWSSDK, AWSSDK_ROOT_DIR must be defined by the user.
    find_package(AWSSDK CONFIG COMPONENTS core dynamodb kinesis s3 REQUIRED)
    target_include_directories(main PRIVATE ${AWSSDK_INCLUDE_DIRS})
    target_link_libraries(main PRIVATE ${AWSSDK_LIBRARIES})
    
    OR
    
    find_package(aws-cpp-sdk-core REQUIRED)
    target_include_directories(main PRIVATE aws-cpp-sdk-core)
    target_link_libraries(main PRIVATE aws-cpp-sdk-core)

azure-storage-blobs-cpp provides CMake targets:

    # this is heuristically generated, and may not be correct
    find_package(azure-storage-blobs-cpp CONFIG REQUIRED)
    target_link_libraries(main PRIVATE Azure::azure-storage-blobs)

azure-storage-files-shares-cpp provides CMake targets:

    # this is heuristically generated, and may not be correct
    find_package(azure-storage-files-shares-cpp CONFIG REQUIRED)
    target_link_libraries(main PRIVATE Azure::azure-storage-files-shares)

libuv provides CMake targets:

    find_package(libuv CONFIG REQUIRED)
    target_link_libraries(main PRIVATE $<IF:$<TARGET_EXISTS:libuv::uv_a>,libuv::uv_a,libuv::uv>)

cppunit provides CMake targets:

    # this is heuristically generated, and may not be correct
    find_package(CppUnit CONFIG REQUIRED)
    target_link_libraries(main PRIVATE CppUnit)

cpr provides CMake targets:

    # this is heuristically generated, and may not be correct
    find_package(cpr CONFIG REQUIRED)
    target_link_libraries(main PRIVATE cpr::cpr)

jsoncpp provides CMake targets:

    # this is heuristically generated, and may not be correct
    find_package(jsoncpp CONFIG REQUIRED)
    target_link_libraries(main PRIVATE JsonCpp::JsonCpp)

h3 provides CMake targets:

    # this is heuristically generated, and may not be correct
    find_package(h3 CONFIG REQUIRED)
    target_link_libraries(main PRIVATE h3::h3)

hiredis provides CMake targets:

    # this is heuristically generated, and may not be correct
    find_package(hiredis CONFIG REQUIRED)
    target_link_libraries(main PRIVATE hiredis::hiredis)

jwt-cpp is header-only and can be used from CMake via:

    find_path(JWT_CPP_INCLUDE_DIRS "jwt-cpp/base.h")
    target_include_directories(main PRIVATE ${JWT_CPP_INCLUDE_DIRS})

The package libarchive is compatible with the CMake Find Module:

    find_package(LibArchive REQUIRED)
    target_include_directories(main PRIVATE ${LibArchive_INCLUDE_DIRS})
    target_link_libraries(main PRIVATE ${LibArchive_LIBRARIES})

    find_package(LibArchive REQUIRED)
    target_link_libraries(main PRIVATE LibArchive::LibArchive) # CMake >= 3.17

libcouchbase-cxx is header-only and can be used from CMake via:

    find_path(LIBCOUCHBASE_CXX_INCLUDE_DIRS "libcouchbase/couchbase++.h")
    target_include_directories(main PRIVATE ${LIBCOUCHBASE_CXX_INCLUDE_DIRS})

libgit2 can be imported via CMake FindPkgConfig module:

    find_package(PkgConfig REQUIRED)
    pkg_check_modules(LIBGIT2 REQUIRED IMPORTED_TARGET libgit2)
    target_link_libraries(main PRIVATE PkgConfig::LIBGIT2)

vcpkg provides proprietary CMake targets:

    find_package(unofficial-libgit2 CONFIG REQUIRED)
    target_link_libraries(main PRIVATE unofficial::libgit2::libgit2)


libmysql provides CMake targets:

    find_package(unofficial-libmysql REQUIRED)
    target_link_libraries(main PRIVATE unofficial::libmysql::libmysql)

The package librdkafka:x64-linux-dynamic provides CMake targets:

    find_package(RdKafka CONFIG REQUIRED)
    target_link_libraries(main PRIVATE RdKafka::rdkafka RdKafka::rdkafka++)

The package libxslt is compatible with built-in CMake targets:

    # xslt library
    find_package(LibXslt REQUIRED)
    target_link_libraries(main PRIVATE LibXslt::LibXslt)

    # exslt library
    find_package(LibXslt REQUIRED)
    target_link_libraries(main PRIVATE LibXslt::LibExslt)

In order to use modules, you must set environment variable LIBXSLT_PLUGINS_PATH
at runtime.

libyaml provides CMake targets:

    # this is heuristically generated, and may not be correct
    find_package(yaml CONFIG REQUIRED)
    target_link_libraries(main PRIVATE yaml)

minizip provides CMake targets:

    find_package(unofficial-minizip CONFIG REQUIRED)
    target_link_libraries(main PRIVATE unofficial::minizip::minizip)

mongo-cxx-driver provides CMake targets:

    find_package(bsoncxx CONFIG REQUIRED)
    target_link_libraries(main PRIVATE $<IF:$<TARGET_EXISTS:mongo::bsoncxx_static>,mongo::bsoncxx_static,mongo::bsoncxx_shared>)

    find_package(mongocxx CONFIG REQUIRED)
    target_link_libraries(main PRIVATE $<IF:$<TARGET_EXISTS:mongo::mongocxx_static>,mongo::mongocxx_static,mongo::mongocxx_shared>)

The package nlohmann-json provides CMake targets:

    find_package(nlohmann_json CONFIG REQUIRED)
    target_link_libraries(main PRIVATE nlohmann_json::nlohmann_json)

The package nlohmann-json can be configured to not provide implicit conversions via a custom triplet file:

    set(nlohmann-json_IMPLICIT_CONVERSIONS OFF)

For more information, see the docs here:
    
    https://json.nlohmann.me/api/macros/json_use_implicit_conversions/

nlp-engine provides CMake targets:

    # this is heuristically generated, and may not be correct
    find_package(nlp-engine CONFIG REQUIRED)
    target_link_libraries(main PRIVATE nlp-engine)

openblas provides CMake targets:

    # this is heuristically generated, and may not be correct
    find_package(OpenBLAS CONFIG REQUIRED)
    target_link_libraries(main PRIVATE OpenBLAS::OpenBLAS)

The package openldapp can be imported via CMake FindPkgConfig module:

    find_package(PkgConfig)
    pkg_check_modules(OPENLDAP REQUIRED IMPORTED_TARGET ldap)
    
    target_link_libraries(main PRIVATE PkgConfig::OPENLDAP)

opentelemetry-cpp provides CMake targets:

    # this is heuristically generated, and may not be correct
    find_package(opentelemetry-cpp CONFIG REQUIRED)
    # note: 21 additional targets are not displayed.
    target_link_libraries(main PRIVATE opentelemetry-cpp::api opentelemetry-cpp::ext opentelemetry-cpp::sdk opentelemetry-cpp::logs)

sqlite3 provides pkgconfig bindings.
sqlite3 provides CMake targets:

    find_package(unofficial-sqlite3 CONFIG REQUIRED)
    target_link_libraries(main PRIVATE unofficial::sqlite3::sqlite3)

wasmtime-cpp-api is header-only and can be used from CMake via:

    find_path(WASMTIME_CPP_API_INCLUDE_DIRS "wasmtime-cpp-api/wasmtime.hh")
    target_include_directories(main PRIVATE ${WASMTIME_CPP_API_INCLUDE_DIRS})